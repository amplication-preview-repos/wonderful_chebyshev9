/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  TodoItem as PrismaTodoItem,
  User as PrismaUser,
} from "@prisma/client";

export class TodoItemServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.TodoItemCountArgs, "select">): Promise<number> {
    return this.prisma.todoItem.count(args);
  }

  async todoItems(
    args: Prisma.TodoItemFindManyArgs
  ): Promise<PrismaTodoItem[]> {
    return this.prisma.todoItem.findMany(args);
  }
  async todoItem(
    args: Prisma.TodoItemFindUniqueArgs
  ): Promise<PrismaTodoItem | null> {
    return this.prisma.todoItem.findUnique(args);
  }
  async createTodoItem(
    args: Prisma.TodoItemCreateArgs
  ): Promise<PrismaTodoItem> {
    return this.prisma.todoItem.create(args);
  }
  async updateTodoItem(
    args: Prisma.TodoItemUpdateArgs
  ): Promise<PrismaTodoItem> {
    return this.prisma.todoItem.update(args);
  }
  async deleteTodoItem(
    args: Prisma.TodoItemDeleteArgs
  ): Promise<PrismaTodoItem> {
    return this.prisma.todoItem.delete(args);
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.todoItem
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
