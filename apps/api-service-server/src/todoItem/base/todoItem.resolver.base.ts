/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { TodoItem } from "./TodoItem";
import { TodoItemCountArgs } from "./TodoItemCountArgs";
import { TodoItemFindManyArgs } from "./TodoItemFindManyArgs";
import { TodoItemFindUniqueArgs } from "./TodoItemFindUniqueArgs";
import { CreateTodoItemArgs } from "./CreateTodoItemArgs";
import { UpdateTodoItemArgs } from "./UpdateTodoItemArgs";
import { DeleteTodoItemArgs } from "./DeleteTodoItemArgs";
import { User } from "../../user/base/User";
import { TodoItemService } from "../todoItem.service";
@graphql.Resolver(() => TodoItem)
export class TodoItemResolverBase {
  constructor(protected readonly service: TodoItemService) {}

  async _todoItemsMeta(
    @graphql.Args() args: TodoItemCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [TodoItem])
  async todoItems(
    @graphql.Args() args: TodoItemFindManyArgs
  ): Promise<TodoItem[]> {
    return this.service.todoItems(args);
  }

  @graphql.Query(() => TodoItem, { nullable: true })
  async todoItem(
    @graphql.Args() args: TodoItemFindUniqueArgs
  ): Promise<TodoItem | null> {
    const result = await this.service.todoItem(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => TodoItem)
  async createTodoItem(
    @graphql.Args() args: CreateTodoItemArgs
  ): Promise<TodoItem> {
    return await this.service.createTodoItem({
      ...args,
      data: {
        ...args.data,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => TodoItem)
  async updateTodoItem(
    @graphql.Args() args: UpdateTodoItemArgs
  ): Promise<TodoItem | null> {
    try {
      return await this.service.updateTodoItem({
        ...args,
        data: {
          ...args.data,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => TodoItem)
  async deleteTodoItem(
    @graphql.Args() args: DeleteTodoItemArgs
  ): Promise<TodoItem | null> {
    try {
      return await this.service.deleteTodoItem(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  async getUser(@graphql.Parent() parent: TodoItem): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
